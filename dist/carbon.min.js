/**
 * carbon - Carbon: A lightweight dependenciy injection library based on bottlejs and angularjs, but without features that are not always used
 * @version v0.0.1
 */
var mapContainer=function(r,n,e,a){return console.log(r,n,e,a),a.providers[r]},factory=function(r,n){var e=this,a=arguments.length>2?Array.prototype.slice.call(arguments,1):null;if(e.providers[r]){var t=e.providers[r];return new t}return a&&(n=n.bind.apply(n,a.map(e.mapContainer,e))),e.providers[r]=n,e.providers[r]()},service=function(r,n){var e=this,a=arguments.length>2?Array.prototype.slice.call(arguments,1):null;return e.providers[r]?r:(a&&(n=n.bind.apply(n,a.map(e.mapContainer,e))),e.providers[r]=new n,e.providers[r])},carbon={instances:{},module:function(r){var n=this,e=arguments.length>1?Array.prototype.slice.call(arguments,1):null,a=Object.create(null);if(a.providers={},a.factory=factory,a.service=service,a.mapContainer=function(r){return this.providers[r]},e)for(var t in e)if(-1!==e[t].indexOf(".")){var i=e[t].split(".")[0],s=e[t].split(".")[1];carbon.instances[i]&&carbon.instances[i].providers[s]&&(a.providers[e[t]]=carbon.instances[i].providers[s])}return n.instances[r]=a,n.instances[r]},wrap:function(r){var n=arguments.length>1?Array.prototype.slice.call(arguments,1):null;return n?r.bind.apply(r,n.map(mapContainer,n)):r}};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmJvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxHQUFBLGNBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQUdBLE1BREEsU0FBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxVQUFBLElBR0EsUUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsS0FDQSxFQUFBLFVBQUEsT0FBQSxFQUFBLE1BQUEsVUFBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLElBRUEsSUFBQSxFQUFBLFVBQUEsR0FBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLFVBQUEsRUFDQSxPQUFBLElBQUEsR0FTQSxNQU5BLEtBQ0EsRUFBQSxFQUFBLEtBQUEsTUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLGFBQUEsS0FHQSxFQUFBLFVBQUEsR0FBQSxFQUVBLEVBQUEsVUFBQSxNQUdBLFFBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEtBQ0EsRUFBQSxVQUFBLE9BQUEsRUFBQSxNQUFBLFVBQUEsTUFBQSxLQUFBLFVBQUEsR0FBQSxJQUVBLE9BQUEsR0FBQSxVQUFBLEdBQ0EsR0FHQSxJQUNBLEVBQUEsRUFBQSxLQUFBLE1BQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxhQUFBLEtBR0EsRUFBQSxVQUFBLEdBQUEsR0FBQSxHQUVBLEVBQUEsVUFBQSxLQUdBLFFBQ0EsYUFDQSxPQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FDQSxFQUFBLFVBQUEsT0FBQSxFQUFBLE1BQUEsVUFBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLEtBRUEsRUFBQSxPQUFBLE9BQUEsS0FVQSxJQVRBLEVBQUEsYUFDQSxFQUFBLFFBQUEsUUFDQSxFQUFBLFFBQUEsUUFDQSxFQUFBLGFBQUEsU0FBQSxHQUNBLE1BQUEsTUFBQSxVQUFBLElBS0EsRUFDQSxJQUFBLEdBQUEsS0FBQSxHQUNBLEdBQUEsS0FBQSxFQUFBLEdBQUEsUUFBQSxLQUFBLENBSUEsR0FBQSxHQUFBLEVBQUEsR0FBQSxNQUFBLEtBQUEsR0FBQSxFQUFBLEVBQUEsR0FBQSxNQUFBLEtBQUEsRUFFQSxRQUFBLFVBQUEsSUFBQSxPQUFBLFVBQUEsR0FBQSxVQUFBLEtBSUEsRUFBQSxVQUFBLEVBQUEsSUFBQSxPQUFBLFVBQUEsR0FBQSxVQUFBLElBTUEsTUFGQSxHQUFBLFVBQUEsR0FBQSxFQUVBLEVBQUEsVUFBQSxJQUdBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxVQUFBLE9BQUEsRUFBQSxNQUFBLFVBQUEsTUFBQSxLQUFBLFVBQUEsR0FBQSxJQUdBLE9BQUEsR0FLQSxFQUFBLEtBQUEsTUFBQSxFQUFBLEVBQUEsSUFBQSxhQUFBLElBSkEiLCJmaWxlIjoiY2FyYm9uLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG52YXIgbWFwQ29udGFpbmVyID0gZnVuY3Rpb24gbWFwQ29udGFpbmVyKGtleSwgaW5kZXgsIGFycmF5LCBjb250ZXh0KSB7XHJcbiAgICAvLyB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgY29uc29sZS5sb2coa2V5LCBpbmRleCwgYXJyYXksIGNvbnRleHQpO1xyXG4gICAgcmV0dXJuIGNvbnRleHQucHJvdmlkZXJzW2tleV07XHJcbn07XHJcblxyXG52YXIgZmFjdG9yeSA9IGZ1bmN0aW9uKG5hbWUsIEZhY3RvcnkpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgZGVwcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IG51bGw7XHJcblxyXG4gICAgaWYgKF90aGlzLnByb3ZpZGVyc1tuYW1lXSkge1xyXG4gICAgICAgIHZhciBTZXJ2aWNlID0gX3RoaXMucHJvdmlkZXJzW25hbWVdO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2VydmljZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgRmFjdG9yeSA9IEZhY3RvcnkuYmluZC5hcHBseShGYWN0b3J5LCBkZXBzLm1hcChfdGhpcy5tYXBDb250YWluZXIsIF90aGlzKSk7XHJcbiAgICB9ICAgICAgICBcclxuXHJcbiAgICBfdGhpcy5wcm92aWRlcnNbbmFtZV0gPSBGYWN0b3J5O1xyXG5cclxuICAgIHJldHVybiBfdGhpcy5wcm92aWRlcnNbbmFtZV0oKTtcclxufTtcclxuXHJcbnZhciBzZXJ2aWNlID0gZnVuY3Rpb24obmFtZSwgU2VydmljZSkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcyxcclxuICAgICAgICBkZXBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogbnVsbDtcclxuXHJcbiAgICBpZiAoX3RoaXMucHJvdmlkZXJzW25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRlcHMpIHtcclxuICAgICAgICBTZXJ2aWNlID0gU2VydmljZS5iaW5kLmFwcGx5KFNlcnZpY2UsIGRlcHMubWFwKF90aGlzLm1hcENvbnRhaW5lciwgX3RoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5wcm92aWRlcnNbbmFtZV0gPSBuZXcgU2VydmljZSgpO1xyXG5cclxuICAgIHJldHVybiBfdGhpcy5wcm92aWRlcnNbbmFtZV07XHJcbn07XHJcblxyXG52YXIgY2FyYm9uID0ge1xyXG4gICAgaW5zdGFuY2VzOiB7fSxcclxuICAgIG1vZHVsZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBudWxsO1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIGluc3RhbmNlLnByb3ZpZGVycyA9IHt9O1xyXG4gICAgICAgIGluc3RhbmNlLmZhY3RvcnkgPSBmYWN0b3J5O1xyXG4gICAgICAgIGluc3RhbmNlLnNlcnZpY2UgPSBzZXJ2aWNlO1xyXG4gICAgICAgIGluc3RhbmNlLm1hcENvbnRhaW5lciA9IGZ1bmN0aW9uIG1hcENvbnRhaW5lcihrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzW2tleV07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBkZXBlbmRlbmNpZXMsIGxvYWQgdGhlIG90aGVyIG1vZHVsZXMgZGVwZW5kZW5jaWVzIGludG8gb3VyIFxyXG4gICAgICAgIC8vIFRPRE86OiBhZGQgaGFuZGxpbmcgZm9yIHdoZW4gbW9kIG9yIHByb3ZpZGVycyBkb24ndCBleGlzdHMgKHByb2JhYmx5IHR5cG9zKVxyXG4gICAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gZGVwcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlcHNbaV0uaW5kZXhPZignLicpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBtb2QgPSBkZXBzW2ldLnNwbGl0KCcuJylbMF0sIHByb3ZpZGVyID0gZGVwc1tpXS5zcGxpdCgnLicpWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghY2FyYm9uLmluc3RhbmNlc1ttb2RdIHx8ICFjYXJib24uaW5zdGFuY2VzW21vZF0ucHJvdmlkZXJzW3Byb3ZpZGVyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnByb3ZpZGVyc1tkZXBzW2ldXSA9IGNhcmJvbi5pbnN0YW5jZXNbbW9kXS5wcm92aWRlcnNbcHJvdmlkZXJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfdGhpcy5pbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW5jZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIF90aGlzLmluc3RhbmNlc1tuYW1lXTtcclxuXHJcbiAgICB9LFxyXG4gICAgd3JhcDogZnVuY3Rpb24oZm4pIHtcclxuICAgICAgICB2YXIgZGVwcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IG51bGw7XHJcblxyXG4gICAgICAgIC8vIGlmIG5vIGRlcGVuZW5kZW5jaWVzLCB3ZSBkb24ndCBuZWVkIHRvIGJlIGhlcmUuXHJcbiAgICAgICAgaWYgKCFkZXBzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHdyYXAgYSBmdW5jdGlvbiB0byBlbmFibGUgZGkuXHJcbiAgICAgICAgcmV0dXJuIGZuLmJpbmQuYXBwbHkoZm4sIGRlcHMubWFwKG1hcENvbnRhaW5lciwgZGVwcykpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9