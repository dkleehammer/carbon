/**
 * carbon - Carbon: A lightweight dependenciy injection library based on bottlejs and angularjs, but without features that are not always used
 * @version v0.0.1
 */
function contentLoaded(e,n){var r=!1,t=!0,a=e.document,o=a.documentElement,c=a.addEventListener,i=c?"addEventListener":"attachEvent",l=c?"removeEventListener":"detachEvent",d=c?"":"on",p=function(t){("readystatechange"!==t.type||"complete"===a.readyState)&&(("load"===t.type?e:a)[l](d+t.type,p,!1),r||(r=!0,n.call(e,t.type||t)))},s=function(){try{o.doScroll("left")}catch(e){return setTimeout(s,50),void 0}p("poll")};if("complete"===a.readyState)n.call(e,"lazy");else{if(!c&&o.doScroll){try{t=!e.frameElement}catch(u){}t&&s()}a[i](d+"DOMContentLoaded",p,!1),a[i](d+"readystatechange",p,!1),e[i](d+"load",p,!1)}}var mapContainer=function(e){return carbon.providers[e]},carbon={instances:{},providers:{},_mapDependencies:function(e,n){return n.map(e(n))},factory:function(e,n){if(carbon.providers[e]){var r=carbon.providers[e];return new r}return carbon.providers[e]=n,carbon.providers[e]()},service:function(e,n){var r=arguments.length>2?Array.prototype.slice.call(arguments,1):null;return carbon.providers[e]?e:(r&&(n=n.bind.apply(n,r.map(mapContainer,r))),carbon.providers[e]=new n,carbon.providers[e])},app:function(e,n,r){var t,a=arguments.length>3?Array.prototype.slice.call(arguments,3):null;return carbon.instances[e]?carbon.instances[e]:(t=Object.create(null),t.config=n,a&&(a=a.map(mapContainer,a)),contentLoaded(window,function(){r&&r.apply(r,a)}),carbon.instances[e]=t,carbon.instances[e])}};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRlbnRsb2FkZWQubWluLmpzIiwiY2FyYm9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLFFBQUEsZUFBQSxFQUFBLEdBQUEsR0FBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxTQUFBLEVBQUEsRUFBQSxnQkFBQSxFQUFBLEVBQUEsaUJBQUEsRUFBQSxFQUFBLG1CQUFBLGNBQUEsRUFBQSxFQUFBLHNCQUFBLGNBQUEsRUFBQSxFQUFBLEdBQUEsS0FBQSxFQUFBLFNBQUEsSUFBQSxxQkFBQSxFQUFBLE1BQUEsYUFBQSxFQUFBLGVBQUEsU0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEdBQUEsRUFBQSxFQUFBLEtBQUEsR0FBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsTUFBQSxNQUFBLEVBQUEsV0FBQSxJQUFBLEVBQUEsU0FBQSxRQUFBLE1BQUEsR0FBQSxNQUFBLFlBQUEsRUFBQSxJQUFBLE9BQUEsRUFBQSxRQUFBLElBQUEsYUFBQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEVBQUEsWUFBQSxDQUFBLElBQUEsR0FBQSxFQUFBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsRUFBQSxhQUFBLE1BQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsbUJBQUEsR0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLG1CQUFBLEdBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEdBQUEsSUNiQSxHQUFBLGNBQUEsU0FBQSxHQUNBLE1BQUEsUUFBQSxVQUFBLElBR0EsUUFDQSxhQUNBLGFBQ0EsaUJBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLElBQUEsRUFBQSxLQUVBLFFBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxPQUFBLFVBQUEsR0FBQSxDQUNBLEdBQUEsR0FBQSxPQUFBLFVBQUEsRUFDQSxPQUFBLElBQUEsR0FLQSxNQUZBLFFBQUEsVUFBQSxHQUFBLEVBRUEsT0FBQSxVQUFBLE1BRUEsUUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsVUFBQSxPQUFBLEVBQUEsTUFBQSxVQUFBLE1BQUEsS0FBQSxVQUFBLEdBQUEsSUFHQSxPQUFBLFFBQUEsVUFBQSxHQUNBLEdBR0EsSUFDQSxFQUFBLEVBQUEsS0FBQSxNQUFBLEVBQUEsRUFBQSxJQUFBLGFBQUEsS0FHQSxPQUFBLFVBQUEsR0FBQSxHQUFBLEdBRUEsT0FBQSxVQUFBLEtBRUEsSUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLEdBQ0EsR0FEQSxFQUFBLFVBQUEsT0FBQSxFQUFBLE1BQUEsVUFBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLElBR0EsT0FBQSxRQUFBLFVBQUEsR0FDQSxPQUFBLFVBQUEsSUFHQSxFQUFBLE9BQUEsT0FBQSxNQUNBLEVBQUEsT0FBQSxFQUVBLElBQ0EsRUFBQSxFQUFBLElBQUEsYUFBQSxJQUdBLGNBQUEsT0FBQSxXQUNBLEdBQ0EsRUFBQSxNQUFBLEVBQUEsS0FJQSxPQUFBLFVBQUEsR0FBQSxFQUVBLE9BQUEsVUFBQSIsImZpbGUiOiJjYXJib24ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBjb250ZW50bG9hZGVkLmpzXG4gKlxuICogQXV0aG9yOiBEaWVnbyBQZXJpbmkgKGRpZWdvLnBlcmluaSBhdCBnbWFpbC5jb20pXG4gKiBTdW1tYXJ5OiBjcm9zcy1icm93c2VyIHdyYXBwZXIgZm9yIERPTUNvbnRlbnRMb2FkZWRcbiAqIFVwZGF0ZWQ6IDIwMTAxMDIwXG4gKiBMaWNlbnNlOiBNSVRcbiAqIFZlcnNpb246IDEuMlxuICpcbiAqIFVSTDpcbiAqIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9Db250ZW50TG9hZGVkL1xuICogaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0NvbnRlbnRMb2FkZWQvTUlULUxJQ0VOU0VcbiAqXG4gKi9cbmZ1bmN0aW9uIGNvbnRlbnRMb2FkZWQoZSx0KXt2YXIgbj1mYWxzZSxyPXRydWUsaT1lLmRvY3VtZW50LHM9aS5kb2N1bWVudEVsZW1lbnQsbz1pLmFkZEV2ZW50TGlzdGVuZXIsdT1vP1wiYWRkRXZlbnRMaXN0ZW5lclwiOlwiYXR0YWNoRXZlbnRcIixhPW8/XCJyZW1vdmVFdmVudExpc3RlbmVyXCI6XCJkZXRhY2hFdmVudFwiLGY9bz9cIlwiOlwib25cIixsPWZ1bmN0aW9uKHIpe2lmKHIudHlwZT09PVwicmVhZHlzdGF0ZWNoYW5nZVwiJiZpLnJlYWR5U3RhdGUhPT1cImNvbXBsZXRlXCIpe3JldHVybn0oci50eXBlPT09XCJsb2FkXCI/ZTppKVthXShmK3IudHlwZSxsLGZhbHNlKTtpZighbil7bj10cnVlO3QuY2FsbChlLHIudHlwZXx8cil9fSxjPWZ1bmN0aW9uKCl7dHJ5e3MuZG9TY3JvbGwoXCJsZWZ0XCIpfWNhdGNoKGUpe3NldFRpbWVvdXQoYyw1MCk7cmV0dXJufWwoXCJwb2xsXCIpfTtpZihpLnJlYWR5U3RhdGU9PT1cImNvbXBsZXRlXCIpe3QuY2FsbChlLFwibGF6eVwiKX1lbHNle2lmKCFvJiZzLmRvU2Nyb2xsKXt0cnl7cj0hZS5mcmFtZUVsZW1lbnR9Y2F0Y2goaCl7fWlmKHIpe2MoKX19aVt1XShmK1wiRE9NQ29udGVudExvYWRlZFwiLGwsZmFsc2UpO2lbdV0oZitcInJlYWR5c3RhdGVjaGFuZ2VcIixsLGZhbHNlKTtlW3VdKGYrXCJsb2FkXCIsbCxmYWxzZSl9fSIsIlxyXG52YXIgbWFwQ29udGFpbmVyID0gZnVuY3Rpb24gbWFwQ29udGFpbmVyKGtleSkge1xyXG4gICAgcmV0dXJuIGNhcmJvbi5wcm92aWRlcnNba2V5XTtcclxufTtcclxuXHJcbnZhciBjYXJib24gPSB7XHJcbiAgICBpbnN0YW5jZXM6IHt9LFxyXG4gICAgcHJvdmlkZXJzOiB7fSxcclxuICAgIF9tYXBEZXBlbmRlbmNpZXM6IGZ1bmN0aW9uKG1hcENvbnRhaW5lciwgZGVwcykge1xyXG4gICAgICAgIHJldHVybiBkZXBzLm1hcChtYXBDb250YWluZXIoZGVwcykpO1xyXG4gICAgfSxcclxuICAgIGZhY3Rvcnk6IGZ1bmN0aW9uKG5hbWUsIEZhY3RvcnkpIHtcclxuICAgICAgICBpZiAoY2FyYm9uLnByb3ZpZGVyc1tuYW1lXSkge1xyXG4gICAgICAgICAgICB2YXIgU2VydmljZSA9IGNhcmJvbi5wcm92aWRlcnNbbmFtZV07XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2VydmljZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FyYm9uLnByb3ZpZGVyc1tuYW1lXSA9IEZhY3Rvcnk7XHJcblxyXG4gICAgICAgIHJldHVybiBjYXJib24ucHJvdmlkZXJzW25hbWVdKCk7XHJcbiAgICB9LFxyXG4gICAgc2VydmljZTogZnVuY3Rpb24obmFtZSwgU2VydmljZSkge1xyXG4gICAgICAgIHZhciBkZXBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogbnVsbCxcclxuICAgICAgICAgICAgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoY2FyYm9uLnByb3ZpZGVyc1tuYW1lXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgICAgIFNlcnZpY2UgPSBTZXJ2aWNlLmJpbmQuYXBwbHkoU2VydmljZSwgZGVwcy5tYXAobWFwQ29udGFpbmVyLCBkZXBzKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXJib24ucHJvdmlkZXJzW25hbWVdID0gbmV3IFNlcnZpY2UoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhcmJvbi5wcm92aWRlcnNbbmFtZV07XHJcbiAgICB9LFxyXG4gICAgYXBwOiBmdW5jdGlvbihuYW1lLCBjb25maWcsIHN0YXJ0KSB7XHJcbiAgICAgICAgdmFyIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMykgOiBudWxsLFxyXG4gICAgICAgICAgICBpbnN0YW5jZSwgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoY2FyYm9uLmluc3RhbmNlc1tuYW1lXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2FyYm9uLmluc3RhbmNlc1tuYW1lXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICBpbnN0YW5jZS5jb25maWcgPSBjb25maWc7XHJcblxyXG4gICAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgICAgIGRlcHMgPSBkZXBzLm1hcChtYXBDb250YWluZXIsIGRlcHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGVudExvYWRlZCh3aW5kb3csIGZ1bmN0aW9uIGluaXRJbnN0YW5jZSgpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5hcHBseShzdGFydCwgZGVwcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2FyYm9uLmluc3RhbmNlc1tuYW1lXSA9IGluc3RhbmNlO1xyXG5cclxuICAgICAgICByZXR1cm4gY2FyYm9uLmluc3RhbmNlc1tuYW1lXTtcclxuICAgIH1cclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9