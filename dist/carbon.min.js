/**
 * carbon - Carbon: A lightweight dependenciy injection library based on bottlejs and angularjs, but without features that are not always used
 * @version v0.0.1
 */
function contentLoaded(e,t){var n=!1,a=!0,r=e.document,o=r.documentElement,c=r.addEventListener,d=c?"addEventListener":"attachEvent",l=c?"removeEventListener":"detachEvent",i=c?"":"on",p=function(a){("readystatechange"!==a.type||"complete"===r.readyState)&&(("load"===a.type?e:r)[l](i+a.type,p,!1),n||(n=!0,t.call(e,a.type||a)))},s=function(){try{o.doScroll("left")}catch(e){return setTimeout(s,50),void 0}p("poll")};if("complete"===r.readyState)t.call(e,"lazy");else{if(!c&&o.doScroll){try{a=!e.frameElement}catch(u){}a&&s()}r[d](i+"DOMContentLoaded",p,!1),r[d](i+"readystatechange",p,!1),e[d](i+"load",p,!1)}}function contentLoaded(e,t){var n=!1,a=!0,r=e.document,o=r.documentElement,c=r.addEventListener,d=c?"addEventListener":"attachEvent",l=c?"removeEventListener":"detachEvent",i=c?"":"on",p=function(a){("readystatechange"!==a.type||"complete"===r.readyState)&&(("load"===a.type?e:r)[l](i+a.type,p,!1),n||(n=!0,t.call(e,a.type||a)))},s=function(){try{o.doScroll("left")}catch(e){return setTimeout(s,50),void 0}p("poll")};if("complete"===r.readyState)t.call(e,"lazy");else{if(!c&&o.doScroll){try{a=!e.frameElement}catch(u){}a&&s()}r[d](i+"DOMContentLoaded",p,!1),r[d](i+"readystatechange",p,!1),e[d](i+"load",p,!1)}}var mapContainer=function(e){return carbon.providers[e]},carbon={instances:{},providers:{},_mapDependencies:function(e,t){return t.map(e(t))},factory:function(e,t){if(carbon.providers[e]){var n=carbon.providers[e];return new n}return carbon.providers[e]=t,carbon.providers[e]()},service:function(e,t){var n=arguments.length>2?Array.prototype.slice.call(arguments,1):null;return carbon.providers[e]?e:(n&&(t=t.bind.apply(t,n.map(mapContainer,n))),carbon.providers[e]=new t,carbon.providers[e])},app:function(e,t,n){var a,r,o=arguments.length>3?Array.prototype.slice.call(arguments,3):null;return carbon.instances[e]?carbon.instances[e]:(a=Object.create(null),a.config=t,o&&(o=o.map(mapContainer,o)),r=function(){n&&n.apply(n,o)},contentLoaded(window,r),carbon.instances[e]=a,carbon.instances[e])}};
//# sourceMappingURL=data:application/json;base64,