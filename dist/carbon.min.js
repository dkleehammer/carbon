/**
 * carbon - Carbon: A lightweight dependenciy injection library based on bottlejs and angularjs, but without features that are not always used
 * @version v0.0.1
 */
var carbon=function(){"use strict";var r=function(r){return context.providers[r]},n=function(r,n){var e=this,t=arguments.length>2?Array.prototype.slice.call(arguments,1):null;if(e.providers[r]){var i=e.providers[r];return new i}return t&&(n=n.bind.apply(n,t.map(e.mapContainer,e))),e.providers[r]=n,e.providers[r]()},e=function(r,n){var e=this,t=arguments.length>2?Array.prototype.slice.call(arguments,1):null;return e.providers[r]?e.providers[r]:(t&&(n=n.bind.apply(n,t.map(e.mapContainer,e))),e.providers[r]=new n,e.providers[r])},t={instances:{},module:function(r){var i=this,a=arguments.length>1?Array.prototype.slice.call(arguments,1):null,s=Object.create(null);if(s.providers={},s.factory=n,s.service=e,s.mapContainer=function(r){return this.providers[r]},a)for(var o in a)if(-1!==a[o].indexOf(".")){var p=a[o].split(".")[0],l=a[o].split(".")[1];t.instances[p]&&t.instances[p].providers[l]&&(s.providers[a[o]]=t.instances[p].providers[l])}return i.instances[r]=s,i.instances[r]},wrap:function(n){var e=arguments.length>1?Array.prototype.slice.call(arguments,1):null;return e?n.bind.apply(n,e.map(r,e)):n}};return t}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmJvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxHQUFBLFFBQUEsV0FDQSxZQUVBLElBQUEsR0FBQSxTQUFBLEdBQ0EsTUFBQSxTQUFBLFVBQUEsSUFHQSxFQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxLQUNBLEVBQUEsVUFBQSxPQUFBLEVBQUEsTUFBQSxVQUFBLE1BQUEsS0FBQSxVQUFBLEdBQUEsSUFFQSxJQUFBLEVBQUEsVUFBQSxHQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsVUFBQSxFQUNBLE9BQUEsSUFBQSxHQVNBLE1BTkEsS0FDQSxFQUFBLEVBQUEsS0FBQSxNQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsYUFBQSxLQUdBLEVBQUEsVUFBQSxHQUFBLEVBRUEsRUFBQSxVQUFBLE1BR0EsRUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsS0FDQSxFQUFBLFVBQUEsT0FBQSxFQUFBLE1BQUEsVUFBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLElBRUEsT0FBQSxHQUFBLFVBQUEsR0FDQSxFQUFBLFVBQUEsSUFHQSxJQUNBLEVBQUEsRUFBQSxLQUFBLE1BQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxhQUFBLEtBR0EsRUFBQSxVQUFBLEdBQUEsR0FBQSxHQUVBLEVBQUEsVUFBQSxLQUdBLEdBQ0EsYUFDQSxPQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FDQSxFQUFBLFVBQUEsT0FBQSxFQUFBLE1BQUEsVUFBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLEtBRUEsRUFBQSxPQUFBLE9BQUEsS0FTQSxJQVJBLEVBQUEsYUFDQSxFQUFBLFFBQUEsRUFDQSxFQUFBLFFBQUEsRUFDQSxFQUFBLGFBQUEsU0FBQSxHQUNBLE1BQUEsTUFBQSxVQUFBLElBSUEsRUFDQSxJQUFBLEdBQUEsS0FBQSxHQUNBLEdBQUEsS0FBQSxFQUFBLEdBQUEsUUFBQSxLQUFBLENBSUEsR0FBQSxHQUFBLEVBQUEsR0FBQSxNQUFBLEtBQUEsR0FBQSxFQUFBLEVBQUEsR0FBQSxNQUFBLEtBQUEsRUFFQSxHQUFBLFVBQUEsSUFBQSxFQUFBLFVBQUEsR0FBQSxVQUFBLEtBSUEsRUFBQSxVQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUEsR0FBQSxVQUFBLElBTUEsTUFGQSxHQUFBLFVBQUEsR0FBQSxFQUVBLEVBQUEsVUFBQSxJQUdBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxVQUFBLE9BQUEsRUFBQSxNQUFBLFVBQUEsTUFBQSxLQUFBLFVBQUEsR0FBQSxJQUdBLE9BQUEsR0FLQSxFQUFBLEtBQUEsTUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLElBSkEsR0FPQSxPQUFBIiwiZmlsZSI6ImNhcmJvbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxudmFyIGNhcmJvbiA9IChmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBtYXBDb250YWluZXIgPSBmdW5jdGlvbiBtYXBDb250YWluZXIoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQucHJvdmlkZXJzW2tleV07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBmYWN0b3J5ID0gZnVuY3Rpb24obmFtZSwgRmFjdG9yeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBudWxsO1xyXG5cclxuICAgICAgICBpZiAoX3RoaXMucHJvdmlkZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICAgIHZhciBTZXJ2aWNlID0gX3RoaXMucHJvdmlkZXJzW25hbWVdO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlcnZpY2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgICAgIEZhY3RvcnkgPSBGYWN0b3J5LmJpbmQuYXBwbHkoRmFjdG9yeSwgZGVwcy5tYXAoX3RoaXMubWFwQ29udGFpbmVyLCBfdGhpcykpO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG5cclxuICAgICAgICBfdGhpcy5wcm92aWRlcnNbbmFtZV0gPSBGYWN0b3J5O1xyXG5cclxuICAgICAgICByZXR1cm4gX3RoaXMucHJvdmlkZXJzW25hbWVdKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzZXJ2aWNlID0gZnVuY3Rpb24obmFtZSwgU2VydmljZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBudWxsO1xyXG5cclxuICAgICAgICBpZiAoX3RoaXMucHJvdmlkZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcm92aWRlcnNbbmFtZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGVwcykge1xyXG4gICAgICAgICAgICBTZXJ2aWNlID0gU2VydmljZS5iaW5kLmFwcGx5KFNlcnZpY2UsIGRlcHMubWFwKF90aGlzLm1hcENvbnRhaW5lciwgX3RoaXMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF90aGlzLnByb3ZpZGVyc1tuYW1lXSA9IG5ldyBTZXJ2aWNlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBfdGhpcy5wcm92aWRlcnNbbmFtZV07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBjYXJib24gPSB7XHJcbiAgICAgICAgaW5zdGFuY2VzOiB7fSxcclxuICAgICAgICBtb2R1bGU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgaW5zdGFuY2UucHJvdmlkZXJzID0ge307XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmZhY3RvcnkgPSBmYWN0b3J5O1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5zZXJ2aWNlID0gc2VydmljZTtcclxuICAgICAgICAgICAgaW5zdGFuY2UubWFwQ29udGFpbmVyID0gZnVuY3Rpb24gbWFwQ29udGFpbmVyKGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzW2tleV07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGRlcGVuZGVuY2llcywgbG9hZCB0aGUgb3RoZXIgbW9kdWxlcyBkZXBlbmRlbmNpZXMgaW50byBvdXIgXHJcbiAgICAgICAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGRlcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVwc1tpXS5pbmRleE9mKCcuJykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZCA9IGRlcHNbaV0uc3BsaXQoJy4nKVswXSwgcHJvdmlkZXIgPSBkZXBzW2ldLnNwbGl0KCcuJylbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FyYm9uLmluc3RhbmNlc1ttb2RdIHx8ICFjYXJib24uaW5zdGFuY2VzW21vZF0ucHJvdmlkZXJzW3Byb3ZpZGVyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnByb3ZpZGVyc1tkZXBzW2ldXSA9IGNhcmJvbi5pbnN0YW5jZXNbbW9kXS5wcm92aWRlcnNbcHJvdmlkZXJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5pbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW5jZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5pbnN0YW5jZXNbbmFtZV07XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd3JhcDogZnVuY3Rpb24oZm4pIHtcclxuICAgICAgICAgICAgdmFyIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm8gZGVwZW5lbmRlbmNpZXMsIHdlIGRvbid0IG5lZWQgdG8gYmUgaGVyZS5cclxuICAgICAgICAgICAgaWYgKCFkZXBzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHdyYXAgYSBmdW5jdGlvbiB0byBlbmFibGUgZGkuXHJcbiAgICAgICAgICAgIHJldHVybiBmbi5iaW5kLmFwcGx5KGZuLCBkZXBzLm1hcChtYXBDb250YWluZXIsIGRlcHMpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNhcmJvbjtcclxufSkoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9