/**
 * carbon - Carbon: A lightweight dependenciy injection library based on bottlejs and angularjs, but without features that are not always used
 * @version v0.0.1
 */
var carbon=function(){"use strict";var r=function(r,n){var e=this,t=arguments.length>2?Array.prototype.slice.call(arguments,1):null;if(e.providers[r]){var i=e.providers[r];return new i}return t&&(n=n.bind.apply(n,t.map(e.mapContainer,e))),e.providers[r]=n,e.providers[r]()},n=function(r,n){var e=this,t=arguments.length>2?Array.prototype.slice.call(arguments,1):null;return e.providers[r]?e.providers[r]:(t&&(n=n.bind.apply(n,t.map(e.mapContainer,e))),e.providers[r]=new n,e.providers[r])},e={instances:{},_importFromModule:function(r){if(void 0!==r.indexOf&&-1!==r.indexOf(".")){var n=r.split(".")[0],t=r.split(".")[1];if(e.instances[n]&&e.instances[n].providers[t])return e.instances[n].providers[t]}},module:function(t){var i=this,a=arguments.length>1?Array.prototype.slice.call(arguments,1):null,o=Object.create(null);if(o.providers={},o.factory=r,o.service=n,o.mapContainer=function(r){return this.providers[r]},a)for(var s in a)o.providers[a[s]]=e._importFromModule(a[s]);return i.instances[t]=o,i.instances[t]},wrap:function(r){var n=arguments.length>1?Array.prototype.slice.call(arguments,1):null,t=[void 0];if(!n)return r;for(var i in n){var a=e._importFromModule(n[i]);a&&t.push(a)}return r.bind.apply(r,t)}};return e}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmJvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxHQUFBLFFBQUEsV0FDQSxZQUVBLElBSUEsR0FBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsS0FDQSxFQUFBLFVBQUEsT0FBQSxFQUFBLE1BQUEsVUFBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLElBRUEsSUFBQSxFQUFBLFVBQUEsR0FBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLFVBQUEsRUFDQSxPQUFBLElBQUEsR0FTQSxNQU5BLEtBQ0EsRUFBQSxFQUFBLEtBQUEsTUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLGFBQUEsS0FHQSxFQUFBLFVBQUEsR0FBQSxFQUVBLEVBQUEsVUFBQSxNQUdBLEVBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEtBQ0EsRUFBQSxVQUFBLE9BQUEsRUFBQSxNQUFBLFVBQUEsTUFBQSxLQUFBLFVBQUEsR0FBQSxJQUVBLE9BQUEsR0FBQSxVQUFBLEdBQ0EsRUFBQSxVQUFBLElBR0EsSUFDQSxFQUFBLEVBQUEsS0FBQSxNQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsYUFBQSxLQUdBLEVBQUEsVUFBQSxHQUFBLEdBQUEsR0FFQSxFQUFBLFVBQUEsS0FHQSxHQUNBLGFBQ0Esa0JBQUEsU0FBQSxHQUNBLEdBQUEsU0FBQSxFQUFBLFNBQUEsS0FBQSxFQUFBLFFBQUEsS0FBQSxDQUlBLEdBQUEsR0FBQSxFQUFBLE1BQUEsS0FBQSxHQUFBLEVBQUEsRUFBQSxNQUFBLEtBQUEsRUFFQSxJQUFBLEVBQUEsVUFBQSxJQUFBLEVBQUEsVUFBQSxHQUFBLFVBQUEsR0FJQSxNQUFBLEdBQUEsVUFBQSxHQUFBLFVBQUEsS0FFQSxPQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FDQSxFQUFBLFVBQUEsT0FBQSxFQUFBLE1BQUEsVUFBQSxNQUFBLEtBQUEsVUFBQSxHQUFBLEtBRUEsRUFBQSxPQUFBLE9BQUEsS0FTQSxJQVJBLEVBQUEsYUFDQSxFQUFBLFFBQUEsRUFDQSxFQUFBLFFBQUEsRUFDQSxFQUFBLGFBQUEsU0FBQSxHQUNBLE1BQUEsTUFBQSxVQUFBLElBSUEsRUFDQSxJQUFBLEdBQUEsS0FBQSxHQUNBLEVBQUEsVUFBQSxFQUFBLElBQUEsRUFBQSxrQkFBQSxFQUFBLEdBTUEsT0FGQSxHQUFBLFVBQUEsR0FBQSxFQUVBLEVBQUEsVUFBQSxJQUdBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxVQUFBLE9BQUEsRUFBQSxNQUFBLFVBQUEsTUFBQSxLQUFBLFVBQUEsR0FBQSxLQUNBLEdBQUEsT0FHQSxLQUFBLEVBQ0EsTUFBQSxFQUlBLEtBQUEsR0FBQSxLQUFBLEdBQUEsQ0FDQSxHQUFBLEdBQUEsRUFBQSxrQkFBQSxFQUFBLEdBRUEsSUFDQSxFQUFBLEtBQUEsR0FLQSxNQUFBLEdBQUEsS0FBQSxNQUFBLEVBQUEsSUFJQSxPQUFBIiwiZmlsZSI6ImNhcmJvbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxudmFyIGNhcmJvbiA9IChmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBtYXBDb250YWluZXIgPSBmdW5jdGlvbiBtYXBDb250YWluZXIoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQucHJvdmlkZXJzW2tleV07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBmYWN0b3J5ID0gZnVuY3Rpb24obmFtZSwgRmFjdG9yeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBudWxsO1xyXG5cclxuICAgICAgICBpZiAoX3RoaXMucHJvdmlkZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICAgIHZhciBTZXJ2aWNlID0gX3RoaXMucHJvdmlkZXJzW25hbWVdO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlcnZpY2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgICAgIEZhY3RvcnkgPSBGYWN0b3J5LmJpbmQuYXBwbHkoRmFjdG9yeSwgZGVwcy5tYXAoX3RoaXMubWFwQ29udGFpbmVyLCBfdGhpcykpO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG5cclxuICAgICAgICBfdGhpcy5wcm92aWRlcnNbbmFtZV0gPSBGYWN0b3J5O1xyXG5cclxuICAgICAgICByZXR1cm4gX3RoaXMucHJvdmlkZXJzW25hbWVdKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzZXJ2aWNlID0gZnVuY3Rpb24obmFtZSwgU2VydmljZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBudWxsO1xyXG5cclxuICAgICAgICBpZiAoX3RoaXMucHJvdmlkZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcm92aWRlcnNbbmFtZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGVwcykge1xyXG4gICAgICAgICAgICBTZXJ2aWNlID0gU2VydmljZS5iaW5kLmFwcGx5KFNlcnZpY2UsIGRlcHMubWFwKF90aGlzLm1hcENvbnRhaW5lciwgX3RoaXMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF90aGlzLnByb3ZpZGVyc1tuYW1lXSA9IG5ldyBTZXJ2aWNlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBfdGhpcy5wcm92aWRlcnNbbmFtZV07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBjYXJib24gPSB7XHJcbiAgICAgICAgaW5zdGFuY2VzOiB7fSxcclxuICAgICAgICBfaW1wb3J0RnJvbU1vZHVsZTogZnVuY3Rpb24oZGVwKSB7XHJcbiAgICAgICAgICAgIGlmICh1bmRlZmluZWQgPT09IGRlcC5pbmRleE9mIHx8IGRlcC5pbmRleE9mKCcuJykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBtb2QgPSBkZXAuc3BsaXQoJy4nKVswXSwgcHJvdmlkZXIgPSBkZXAuc3BsaXQoJy4nKVsxXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghY2FyYm9uLmluc3RhbmNlc1ttb2RdIHx8ICFjYXJib24uaW5zdGFuY2VzW21vZF0ucHJvdmlkZXJzW3Byb3ZpZGVyXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY2FyYm9uLmluc3RhbmNlc1ttb2RdLnByb3ZpZGVyc1twcm92aWRlcl07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb2R1bGU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgaW5zdGFuY2UucHJvdmlkZXJzID0ge307XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmZhY3RvcnkgPSBmYWN0b3J5O1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5zZXJ2aWNlID0gc2VydmljZTtcclxuICAgICAgICAgICAgaW5zdGFuY2UubWFwQ29udGFpbmVyID0gZnVuY3Rpb24gbWFwQ29udGFpbmVyKGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzW2tleV07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGRlcGVuZGVuY2llcywgbG9hZCB0aGUgb3RoZXIgbW9kdWxlcyBkZXBlbmRlbmNpZXMgaW50byBvdXIgXHJcbiAgICAgICAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGRlcHMpIHtcclxuICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnByb3ZpZGVyc1tkZXBzW2ldXSA9IGNhcmJvbi5faW1wb3J0RnJvbU1vZHVsZShkZXBzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3RoaXMuaW5zdGFuY2VzW25hbWVdID0gaW5zdGFuY2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuaW5zdGFuY2VzW25hbWVdO1xyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdyYXA6IGZ1bmN0aW9uKGZuKSB7XHJcbiAgICAgICAgICAgIHZhciBkZXBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IFt1bmRlZmluZWRdOyAvLyBmaXJzdCBpdGVtIGhhcyB0byBiZSB1bmRlZmluZWQgZm9yIHNvbWUgcmVhc29uXHJcblxyXG4gICAgICAgICAgICAvLyBpZiBubyBkZXBlbmVuZGVuY2llcywgd2UgZG9uJ3QgbmVlZCB0byBiZSBoZXJlLlxyXG4gICAgICAgICAgICBpZiAoIWRlcHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmbjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIGRlcGVuZGVuY2llcywgbWFwIHRvIHRoZWlyIG1vZHVsZXMsIGFuZCByZXRyaWV2ZSB0aGVtIGZyb20gaXQncyBwcm92aWRlcnNcclxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBkZXBzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9IGNhcmJvbi5faW1wb3J0RnJvbU1vZHVsZShkZXBzW2ldKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wdXNoKGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB3cmFwIGEgZnVuY3Rpb24gdG8gZW5hYmxlIGRpIG9mIG1vZHVsZSBkZXBlbmRlbmNpZXMuXHJcbiAgICAgICAgICAgIHJldHVybiBmbi5iaW5kLmFwcGx5KGZuLCBjb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGNhcmJvbjtcclxufSkoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9