{"version":3,"sources":["carbon.js"],"names":[],"mappings":"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","file":"carbon.min.js","sourcesContent":["\n(function(exports) {\n    \"use strict\";\n\n    var slice = Array.prototype.slice;\n\n    function ModuleTemplate() {\n        return {\n            _providers: {},\n            _get: function(providerName) { return this._providers[providerName] || undefined; },\n            _set: function(providerName, provider) { return (this._providers[providerName] = provider); },\n            _find: function(name, storageName, constructed) {\n                for (var i in this._providers) {\n                    if (i.indexOf(name) === 0) {\n                        if (!storageName) {\n                            return (i.split(name)[1] == 'Service' ? this._providers[i] : (constructed !== false ? new this._providers[i]() : this._providers[i]));\n                        } else {\n                            return [i.split(name)[1] == 'Service' ? this._providers[i] : (constructed !== false ? new this._providers[i](): this._providers[i]), i];\n                        }\n                    }\n                }\n            },\n            _mapDependencies: function(key) { return this._find(key); },\n            _getDependencies: function(dependencies) {\n                var injectables = [], objs = [];\n                for (var i in dependencies) {\n                    (typeof dependencies[i] === 'string') ? injectables.push(dependencies[i]) : objs.push(dependencies[i]);\n                }\n                return injectables = (injectables.map(this._mapDependencies, this).concat(objs));\n            },\n            factory: function(name, Factory) {\n                var providerName = name + 'Factory',\n                    deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null,\n                    provider, Service;\n\n                // ----------------------------------------\n                // check if the factory exists\n                // ----------------------------------------\n                if ((provider = this._get(providerName)) !== undefined && arguments.length === 1) {\n                    Service = provider;\n                    return new Service();\n                }\n\n                // ----------------------------------------\n                // add any dependencies if they exist\n                // ----------------------------------------\n                // REVIEW:: why does this setup always need the first item to be undefined ? \n                Factory = deps ? Factory.bind.apply(Factory, ([undefined]).concat(this._getDependencies(deps))) : Factory;\n\n                // ----------------------------------------\n                // store the factory\n                // ----------------------------------------\n                this._set(providerName, Factory);\n\n                // ----------------------------------------\n                // return the new factory instance as service\n                // ----------------------------------------\n                Service = this._get(providerName);\n                return new Service();\n\n            },\n            service: function(name, Service) {\n                var providerName = name + 'Service', deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null, provider;\n\n                // ----------------------------------------\n                // check if the service exists\n                // ----------------------------------------\n                if ((provider = this._get(providerName)) !== undefined && arguments.length === 1) {\n                    return provider;\n                }\n\n                // ----------------------------------------\n                // add any dependencies if they exist\n                // ----------------------------------------\n                // REVIEW:: why does this setup always need the first item to be undefined ?\n                Service = deps ? Service.bind.apply(Service, ([undefined]).concat(this._getDependencies(deps))) : Service;\n\n                // ----------------------------------------\n                // instantiate the service\n                // ----------------------------------------\n                Service = new Service();\n\n                // ----------------------------------------\n                // store the singleton\n                // ----------------------------------------\n                return this._set(providerName, Service);\n            }\n        };\n    }\n\n    var carbon = {\n        _modules: {},\n        map_dependencies: function(module, dependencies) {\n            var mod, provider;\n            for (var i in dependencies) {\n                // if i is an object/function, add it directly.\n                if (typeof dependencies[i] !== 'string') {\n                    (module._set ? module._set(i, dependencies[i]) : module.push(dependencies[i]));\n                    continue;\n                }\n\n                if (undefined === dependencies.indexOf || dependencies[i].indexOf('.') === -1) {\n                    continue;\n                }\n\n                mod = dependencies[i].split('.')[0], provider = dependencies[i].split('.')[1];\n\n                // check if the other module exists and the provider exists in it.\n                if (!carbon._get(mod) || !carbon._get(mod)._find(provider)) {\n                    continue;\n                }\n\n                // if all exists, set the provider into this module\n                var moduleProvider = carbon._get(mod)._find(provider, true, false);\n\n                if (module._set !== undefined) {\n                    module._set(mod+'.'+moduleProvider[1], moduleProvider[0]);\n                } else {\n                    module.push(moduleProvider[0]);\n                }\n            }\n        },\n        _get: function(name) { return this._modules[name] || undefined; },\n        _set: function(name, module) { return this._modules[name] = module; },\n        module: function(name) {\n            var deps = arguments.length > 1 ? slice.call(arguments, 1) : null, mt;\n                \n            if (this._get(name)) {\n                return this._get(name);\n            }\n\n            // create new instance\n            mt = new ModuleTemplate();\n            var instance = Object.create(mt);\n\n            instance._name = name;\n\n            // import other module dependencies\n            if (deps) {\n                this.map_dependencies(instance, deps);\n            }\n\n            return instance = this._set(name, instance);\n        },\n        wrap: function(fn) {\n            var deps = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : null, container = [undefined];\n\n            if (deps) {\n                // map to the modules, and retrieve them from it's providers\n                this.map_dependencies(container, deps);\n\n                // wrap a function to enable di of module dependencies.\n                fn = fn.bind.apply(fn, container);\n            }\n\n            return fn;\n        }\n    };\n    exports.carbon = carbon;\n})(this);\n"],"sourceRoot":"/source/"}