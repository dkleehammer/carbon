{"version":3,"sources":["carbon.js"],"names":[],"mappings":"AACA,GAAA,QAAA,WACA,YAEA,IAIA,GAAA,SAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,UAAA,OAAA,EAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,IAEA,IAAA,EAAA,UAAA,GAAA,CACA,GAAA,GAAA,EAAA,UAAA,EACA,OAAA,IAAA,GASA,MANA,KACA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,IAAA,EAAA,aAAA,KAGA,EAAA,UAAA,GAAA,EAEA,EAAA,UAAA,MAGA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,UAAA,OAAA,EAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,IAEA,OAAA,GAAA,UAAA,GACA,EAAA,UAAA,IAGA,IACA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,IAAA,EAAA,aAAA,KAGA,EAAA,UAAA,GAAA,GAAA,GAEA,EAAA,UAAA,KAGA,GACA,aACA,kBAAA,SAAA,GACA,GAAA,SAAA,EAAA,SAAA,KAAA,EAAA,QAAA,KAAA,CAIA,GAAA,GAAA,EAAA,MAAA,KAAA,GAAA,EAAA,EAAA,MAAA,KAAA,EAEA,IAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,UAAA,GAIA,MAAA,GAAA,UAAA,GAAA,UAAA,KAEA,OAAA,SAAA,GACA,GAAA,GAAA,KACA,EAAA,UAAA,OAAA,EAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,KAEA,EAAA,OAAA,OAAA,KASA,IARA,EAAA,aACA,EAAA,QAAA,EACA,EAAA,QAAA,EACA,EAAA,aAAA,SAAA,GACA,MAAA,MAAA,UAAA,IAIA,EACA,IAAA,GAAA,KAAA,GACA,EAAA,UAAA,EAAA,IAAA,EAAA,kBAAA,EAAA,GAMA,OAFA,GAAA,UAAA,GAAA,EAEA,EAAA,UAAA,IAGA,KAAA,SAAA,GACA,GAAA,GAAA,UAAA,OAAA,EAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,KACA,GAAA,OAGA,KAAA,EACA,MAAA,EAIA,KAAA,GAAA,KAAA,GAAA,CACA,GAAA,GAAA,EAAA,kBAAA,EAAA,GAEA,IACA,EAAA,KAAA,GAKA,MAAA,GAAA,KAAA,MAAA,EAAA,IAIA,OAAA","file":"carbon.min.js","sourcesContent":["\r\nvar carbon = (function() {\r\n    \"use strict\";\r\n\r\n    var mapContainer = function mapContainer(key) {\r\n        return context.providers[key];\r\n    };\r\n\r\n    var factory = function(name, Factory) {\r\n        var _this = this,\r\n            deps = arguments.length > 2 ? Array.prototype.slice.call(arguments, 1) : null;\r\n\r\n        if (_this.providers[name]) {\r\n            var Service = _this.providers[name];\r\n            return new Service();\r\n        }\r\n\r\n        if (deps) {\r\n            Factory = Factory.bind.apply(Factory, deps.map(_this.mapContainer, _this));\r\n        }        \r\n\r\n        _this.providers[name] = Factory;\r\n\r\n        return _this.providers[name]();\r\n    };\r\n\r\n    var service = function(name, Service) {\r\n        var _this = this,\r\n            deps = arguments.length > 2 ? Array.prototype.slice.call(arguments, 1) : null;\r\n\r\n        if (_this.providers[name]) {\r\n            return _this.providers[name];\r\n        }\r\n\r\n        if (deps) {\r\n            Service = Service.bind.apply(Service, deps.map(_this.mapContainer, _this));\r\n        }\r\n\r\n        _this.providers[name] = new Service();\r\n\r\n        return _this.providers[name];\r\n    };\r\n\r\n    var carbon = {\r\n        instances: {},\r\n        _importFromModule: function(dep) {\r\n            if (undefined === dep.indexOf || dep.indexOf('.') === -1) {\r\n                return;\r\n            }\r\n\r\n            var mod = dep.split('.')[0], provider = dep.split('.')[1];\r\n\r\n            if (!carbon.instances[mod] || !carbon.instances[mod].providers[provider]) {\r\n                return;\r\n            }\r\n\r\n            return carbon.instances[mod].providers[provider];\r\n        },\r\n        module: function(name) {\r\n            var _this = this,\r\n                deps = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : null;\r\n\r\n            var instance = Object.create(null);\r\n            instance.providers = {};\r\n            instance.factory = factory;\r\n            instance.service = service;\r\n            instance.mapContainer = function mapContainer(key) {\r\n                return this.providers[key];\r\n            };\r\n\r\n            // if we have dependencies, load the other modules dependencies into our \r\n            if (deps) {\r\n                for (var i in deps) {\r\n                   instance.providers[deps[i]] = carbon._importFromModule(deps[i]);\r\n                }\r\n            }\r\n\r\n            _this.instances[name] = instance;\r\n\r\n            return _this.instances[name];\r\n\r\n        },\r\n        wrap: function(fn) {\r\n            var deps = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : null,\r\n                container = [undefined]; // first item has to be undefined for some reason\r\n\r\n            // if no depenendencies, we don't need to be here.\r\n            if (!deps) {\r\n                return fn;\r\n            }\r\n\r\n            // loop through dependencies, map to their modules, and retrieve them from it's providers\r\n            for (var i in deps) {\r\n                var d = carbon._importFromModule(deps[i]);\r\n\r\n                if (d) {\r\n                    container.push(d);\r\n                }\r\n            }\r\n\r\n            // wrap a function to enable di of module dependencies.\r\n            return fn.bind.apply(fn, container);\r\n        }\r\n    };\r\n\r\n    return carbon;\r\n})();\r\n"],"sourceRoot":"/source/"}