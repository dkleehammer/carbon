{"version":3,"sources":["carbon.js","carbon2.js"],"names":[],"mappings":"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","file":"carbon.min.js","sourcesContent":["\n(function(exports) {\n    \"use strict\";\n\n    var slice = Array.prototype.slice;\n\n    function extend(destination, source) {\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                destination[k] = source[k];\n            }\n        }\n        return destination; \n    }\n\n    var moduleTemplate = {\n        _providers: {},\n        _get: function(providerName) { return this._providers[providerName] || undefined; },\n        _set: function(providerName, provider) { return (this._providers[providerName] = provider); },\n        _find: function(name) {\n            for (var i in this._providers) {\n                if (i.indexOf(name) === 0) {\n                    return this._providers[i];\n                }\n            }\n        },\n        _mapDependencies: function mapDependencies(key) { return this._find(key); },\n        _getDependencies: function buildDependencies(dependencies) {\n            var injectables = [], objs = [];\n            for (var i in dependencies) {\n                (typeof dependencies[i] === 'string') ? injectables.push(dependencies[i]) : objs.push(dependencies[i]);\n            }\n            return injectables = injectables.map(this._mapDependencies, this).concat(objs);\n        },\n        factory: function(name, Factory) {\n            var providerName = name + 'Factory',\n                deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null,\n                extendObj, provider;\n\n            // ----------------------------------------\n            // check if the factory exists\n            // ----------------------------------------\n            if (provider = (this._get(providerName))) {\n                // ----------------------------------------\n                // check if accessing or creating, if creating and already exists, then throw error\n                // ----------------------------------------\n                if (arguments.length === 1) {\n                    return provider\n                } else {\n                    throw new Error('ProviderError: Factory provider ' + name + ' already exists in module');\n                }\n            }\n\n            // ----------------------------------------\n            // add any dependencies if they exist\n            // ----------------------------------------\n            // REVIEW:: why does this setup always need the first item to be undefined ? \n            Factory = deps ? Factory.bind.apply(Factory, ([undefined]).concat(this._getDependencies(deps))) : Factory;\n\n        \n            // ----------------------------------------\n            // store the factory\n            // ----------------------------------------\n            this._set(providerName, Factory);\n\n            // ----------------------------------------\n            // return the new instance\n            // ----------------------------------------\n            var Service = this._get(providerName);\n            return new Service();\n\n        },\n        service: function(name, Service) {\n            var providerName = name + 'Service',\n                deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null,\n                extendObj, provider;\n\n            // ----------------------------------------\n            // check if the service exists\n            // ----------------------------------------\n            if (provider = (this._get(providerName))) {\n                // ----------------------------------------\n                // check if accessing or creating, if creating and already exists, then throw error\n                // ----------------------------------------\n                if (arguments.length === 1) {\n                    return provider;\n                } else {\n                    throw new Error('ProviderError: Service provider ' + name + ' already exists in module');\n                }\n            }\n\n            // ----------------------------------------\n            // add any dependencies if they exist\n            // ----------------------------------------\n            // REVIEW:: why does this setup always need the first item to be undefined ? \n            Service = deps ? Service.bind.apply(Service, ([undefined]).concat(this._getDependencies(deps))) : Service;\n\n            // ----------------------------------------\n            // instantiate the service\n            // ----------------------------------------\n            Service = new Service();\n\n            // ----------------------------------------\n            // if we are extending the object, use extend\n            // ----------------------------------------\n            Service = extendObj ? extend(Service, extendObj) : Service;\n\n            // ----------------------------------------\n            // store the singleton\n            // ----------------------------------------\n            return this._set(providerName, Service);\n        }\n    };\n\n    var carbon = {\n        _modules: {},\n        map_dependencies: function(module, dependencies) {\n            var container = [], mod, provider, other_module;\n            for (var i in dependencies) {\n                if (undefined === dependencies.indexOf || dependencies.indexOf('.') === -1) {\n                    continue\n                }\n\n                mod = dependencies.split('.')[0], provider = dependencies.split('.')[1];\n\n                // check if the other module exists and the provider exists in it.\n                if (!carbon._get(mod) || !carbon._get(mod)._get(provider)) {\n                    continue;\n                }\n\n                // if all exists, set the provider into this module\n                module._set(i, carbon._get(mod)._get(provider));\n            }\n        },\n        _get: function(name) { return this._modules[name] || undefined; },\n        _set: function(name, module) { return this._modules[name] = module},\n        module: function(name) {\n            var deps = arguments.length > 1 ? slice.call(arguments, 1) : null;\n            if (this._get(name)) {\n                return this._get(name);\n            }\n\n            // create new instance\n            var instance = Object.create(moduleTemplate);\n\n            instance._name = name;\n\n            // import other module dependencies\n            if (deps) {\n                this.map_dependencies(instance, deps);\n            }\n\n            return instance = this._set(name, instance);\n        }\n    };\n\n    exports.carbon = carbon;\n})(this);\n","\n(function(exports) {\n    \"use strict\";\n\n    var slice = Array.prototype.slice;\n\n    function extend(destination, source) {\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                destination[k] = source[k];\n            }\n        }\n        return destination; \n    }\n\n    var moduleTemplate = {\n        _providers: {},\n        _get: function(providerName) { return this._providers[providerName] || undefined; },\n        _set: function(providerName, provider) { return this._providers[providerName] = provider},\n        _find: function(name) {\n            for (var i in this._providers) {\n                if (i.indexOf(name) === 0) {\n                    return this._providers[i];\n                }\n            }\n        },\n        _mapDependencies: function mapDependencies(key) { return this._find(key); },\n        _getDependencies: function buildDependencies(dependencies) {\n            var injectables = [], objs = [];\n            for (var i in dependencies) {\n                (typeof dependencies[i] === 'string') ? injectables.push(dependencies[i]) : objs.push(dependencies[i]);\n            }\n            return injectables = injectables.map(this._mapDependencies, this).concat(objs);\n        },\n        factory: function(name, Factory) {\n            var providerName = name + 'Factory',\n                deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null,\n                extendObj, provider;\n\n            // ----------------------------------------\n            // check if the factory exists\n            // ----------------------------------------\n            if (provider = (this._get(providerName))) {\n                // ----------------------------------------\n                // check if accessing or creating, if creating and already exists, then throw error\n                // ----------------------------------------\n                if (arguments.length === 1) {\n                    return provider\n                } else {\n                    throw new Error('ProviderError: Factory provider ' + name + ' already exists in module');\n                }\n            }\n\n            // ----------------------------------------\n            // add any dependencies if they exist\n            // ----------------------------------------\n            // REVIEW:: why does this setup always need the first item to be undefined ? \n            Factory = deps ? Factory.bind.apply(Factory, ([undefined]).concat(this._getDependencies(deps))) : Factory;\n\n        \n            // ----------------------------------------\n            // store the factory\n            // ----------------------------------------\n            this._set(providerName, Factory);\n\n            // ----------------------------------------\n            // return the new instance\n            // ----------------------------------------\n            var Service = this._get(providerName);\n            return new Service();\n\n        },\n        service: function(name, Service) {\n            var providerName = name + 'Service',\n                deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null,\n                extendObj, provider;\n\n            // ----------------------------------------\n            // check if the service exists\n            // ----------------------------------------\n            if (provider = (this._get(providerName))) {\n                // ----------------------------------------\n                // check if accessing or creating, if creating and already exists, then throw error\n                // ----------------------------------------\n                if (arguments.length === 1) {\n                    return provider;\n                } else {\n                    throw new Error('ProviderError: Service provider ' + name + ' already exists in module');\n                }\n            }\n\n            // ----------------------------------------\n            // add any dependencies if they exist\n            // ----------------------------------------\n            // REVIEW:: why does this setup always need the first item to be undefined ? \n            Service = deps ? Service.bind.apply(Service, ([undefined]).concat(this._getDependencies(deps))) : Service;\n\n            // ----------------------------------------\n            // instantiate the service\n            // ----------------------------------------\n            Service = new Service();\n\n            // ----------------------------------------\n            // if we are extending the object, use extend\n            // ----------------------------------------\n            Service = extendObj ? extend(Service, extendObj) : Service;\n\n            // ----------------------------------------\n            // store the singleton\n            // ----------------------------------------\n            return this._set(providerName, Service);\n        }\n    };\n\n    var carbon = {\n        _modules: {},\n        map_dependencies: function(module, dependencies) {\n            var container = [], mod, provider, other_module;\n            for (var i in dependencies) {\n                if (undefined === dependencies.indexOf || dependencies.indexOf('.') === -1) {\n                    continue\n                }\n\n                mod = dependencies.split('.')[0], provider = dependencies.split('.')[1];\n\n                // check if the other module exists and the provider exists in it.\n                if (!carbon._get(mod) || !carbon._get(mod)._get(provider)) {\n                    continue;\n                }\n\n                // if all exists, set the provider into this module\n                module._set(i, carbon._get(mod)._get(provider));\n            }\n        },\n        _get: function(name) { return this._modules[name] || undefined; },\n        _set: function(name, module) { return this._modules[name] = module},\n        module: function(name) {\n            var deps = arguments.length > 1 ? slice.call(arguments, 1) : null;\n            if (this._get(name)) {\n                return this._get(name);\n            }\n\n            // create new instance\n            var instance = Object.create(moduleTemplate);\n\n            instance._name = name;\n\n            // import other module dependencies\n            if (deps) {\n                this.map_dependencies(instance, deps);\n            }\n\n            return instance = this._set(name, instance);\n        }\n    };\n\n    exports.carbon = carbon;\n})(this);\n"],"sourceRoot":"/source/"}