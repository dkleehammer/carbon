{"version":3,"sources":["carbon.js","carbon3.js"],"names":[],"mappings":"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","file":"carbon.min.js","sourcesContent":["\n(function(exports) {\n    \"use strict\";\n\n    var slice = Array.prototype.slice;\n\n    function ModuleTemplate() {\n        return {\n            _providers: {},\n            _get: function(providerName) { return this._providers[providerName] || undefined; },\n            _set: function(providerName, provider) { return (this._providers[providerName] = provider); },\n            _find: function(name, constructed) {\n                for (var i in this._providers) {\n                    if (i.indexOf(name) === 0) {\n                        if (i.split(name)[1] == 'Factory') {\n                            return (constructed !== false ? new this._providers[i]() : this._providers[i]);\n                        } else {\n                            return (typeof this._providers[i] === 'function') ? new this._providers[i]() : this._providers[i];\n                        }\n                        // return [i.split(name)[1] == 'Service' ? this._providers[i] : (constructed !== false ? new this._providers[i](): this._providers[i]), i];\n                    }\n                }\n            },\n            _mapDependencies: function(key) { return (typeof key === 'string' ? this._find(key) : key); },\n            _getDependencies: function(dependencies) {\n                return dependencies.map(this._mapDependencies, this);\n            },\n             factory: function(name, Factory) {\n                var providerName = name + 'Factory',\n                    deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null,\n                    provider, Service;\n\n                // ----------------------------------------\n                // check if the factory exists\n                // ----------------------------------------\n                provider = this._get(providerName);\n                if (provider !== undefined && arguments.length === 1) {\n                    Service = provider;\n                    return new Service();\n                } else if (provider !== undefined && arguments.length > 1) {\n                    throw new Error('Factory ' + name + ' already exists.');\n                }\n\n                // ----------------------------------------\n                // add any dependencies if they exist\n                // ----------------------------------------\n                // REVIEW:: why does this setup always need the first item to be undefined ? \n                Factory = deps ? Factory.bind.apply(Factory, ([undefined]).concat(this._getDependencies(deps))) : Factory;\n\n                // ----------------------------------------\n                // store the factory\n                // ----------------------------------------\n                this._set(providerName, Factory);\n\n                // ----------------------------------------\n                // return the module for chaining\n                // ----------------------------------------\n                return this;\n            },\n            service: function(name, Service) {\n                var providerName = name + 'Service', deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null, provider;\n\n                // ----------------------------------------\n                // check if the service exists\n                // ----------------------------------------\n                provider = this._get(providerName);\n                if (provider !== undefined && arguments.length === 1) {\n                    return (typeof provider === 'function' ? this._set(providerName, new provider()) : provider);\n                } else if (provider !== undefined && arguments.length > 1) {\n                    throw new Error('Service ' + name + ' already exists.');\n                }\n\n                // ----------------------------------------\n                // add any dependencies if they exist\n                // ----------------------------------------\n                // REVIEW:: why does this setup always need the first item to be undefined ?\n                Service = deps ? Service.bind.apply(Service, ([undefined]).concat(this._getDependencies(deps))) : Service;\n\n                // ----------------------------------------\n                // save the service\n                // ----------------------------------------\n                this._set(providerName, Service);\n\n                // ----------------------------------------\n                // return the module for chaining\n                // ----------------------------------------\n                return this;\n            }\n        };\n    }\n\n    var carbon = {\n        _modules: {},\n        _map_dependencies: function(container, dependencies) {\n            var injectables, objs\n\n            for (var i in dependencies) {\n                // ----------------------------------------\n                // if i is an object/function, add it directly.\n                // ----------------------------------------\n                if (typeof dependencies[i] !== 'string') {\n                    container.push(dependencies[i]);\n                    continue;\n                }\n\n                // ----------------------------------------\n                // Get the injectable from the module we are importing from\n                // ----------------------------------------\n                var mod = dependencies[i].split('.')[0],\n                    provider = dependencies[i].split('.')[1],\n                    injectables, objs, module;\n\n                // ----------------------------------------\n                // get the module\n                // ----------------------------------------\n                module = carbon._modules[mod];\n\n                // ----------------------------------------\n                // use the module to try and load the provider\n                // ----------------------------------------\n                container.push(module._find(provider, false, true));\n            }\n        },\n        module: function(name) {\n            var mt, instance;\n\n            if (this._modules[name]) {\n                return this._modules[name];\n            }\n\n            // create new instance\n            mt = new ModuleTemplate();\n            instance = Object.create(mt);\n\n            instance._name = name;\n\n            return instance = this._modules[name] = instance;\n        },\n        wrap: function(fn) {\n            var deps = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : null, container = [undefined];\n\n            if (deps) {\n                // ----------------------------------------\n                // map to the modules, and retrieve them from it's providers\n                // ----------------------------------------\n                this._map_dependencies(container, deps);\n\n                // ----------------------------------------\n                // wrap a function to enable di of module dependencies.\n                // ----------------------------------------\n                fn = fn.bind.apply(fn, container);\n            }\n            return fn;            \n        }\n    };\n    exports.carbon = carbon;\n})(this);\n","\r\n(function(exports) {\r\n    \"use strict\";\r\n\r\n    var slice = Array.prototype.slice;\r\n\r\n    function ModuleTemplate() {\r\n        return {\r\n            _providers: {},\r\n            _get: function(providerName) { return this._providers[providerName] || undefined; },\r\n            _set: function(providerName, provider) { return (this._providers[providerName] = provider); },\r\n            _find: function(name, constructed) {\r\n                for (var i in this._providers) {\r\n                    if (i.indexOf(name) === 0) {\r\n                        if (i.split(name)[1] == 'Factory') {\r\n                            return (constructed !== false ? new this._providers[i]() : this._providers[i]);\r\n                        } else {\r\n                            return (typeof this._providers[i] === 'function') ? new this._providers[i]() : this._providers[i];\r\n                        }\r\n                        // return [i.split(name)[1] == 'Service' ? this._providers[i] : (constructed !== false ? new this._providers[i](): this._providers[i]), i];\r\n                    }\r\n                }\r\n            },\r\n            _mapDependencies: function(key) { return (typeof key === 'string' ? this._find(key) : key); },\r\n            _getDependencies: function(dependencies) {\r\n                return dependencies.map(this._mapDependencies, this);\r\n            },\r\n             factory: function(name, Factory) {\r\n                var providerName = name + 'Factory',\r\n                    deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null,\r\n                    provider, Service;\r\n\r\n                // ----------------------------------------\r\n                // check if the factory exists\r\n                // ----------------------------------------\r\n                if ((provider = this._get(providerName)) !== undefined && arguments.length === 1) {\r\n                    Service = provider;\r\n                    return new Service();\r\n                }\r\n\r\n                // ----------------------------------------\r\n                // add any dependencies if they exist\r\n                // ----------------------------------------\r\n                // REVIEW:: why does this setup always need the first item to be undefined ? \r\n                Factory = deps ? Factory.bind.apply(Factory, ([undefined]).concat(this._getDependencies(deps))) : Factory;\r\n\r\n                // ----------------------------------------\r\n                // store the factory\r\n                // ----------------------------------------\r\n                this._set(providerName, Factory);\r\n\r\n                // ----------------------------------------\r\n                // return the module for chaining\r\n                // ----------------------------------------\r\n                return this;\r\n            },\r\n            service: function(name, Service) {\r\n                var providerName = name + 'Service', deps = arguments.length > 2 ? slice.call(arguments, 2, arguments.length) : null, provider;\r\n\r\n                // ----------------------------------------\r\n                // check if the service exists\r\n                // ----------------------------------------\r\n                if ((provider = this._get(providerName)) !== undefined && arguments.length === 1) {\r\n                    return (typeof provider === 'function' ? this._set(providerName, new provider()) : provider);\r\n                } else if (provider !== undefined && arguments.length > 1) {\r\n                    throw new Error('Provider ' + name + ' already exists.');\r\n                }\r\n\r\n                // ----------------------------------------\r\n                // add any dependencies if they exist\r\n                // ----------------------------------------\r\n                // REVIEW:: why does this setup always need the first item to be undefined ?\r\n                Service = deps ? Service.bind.apply(Service, ([undefined]).concat(this._getDependencies(deps))) : Service;\r\n\r\n                // ----------------------------------------\r\n                // save the service\r\n                // ----------------------------------------\r\n                this._set(providerName, Service);\r\n\r\n                // ----------------------------------------\r\n                // return the module for chaining\r\n                // ----------------------------------------\r\n                return this;\r\n            }\r\n        };\r\n    }\r\n\r\n    var carbon = {\r\n        _modules: {},\r\n        _map_dependencies: function(container, dependencies) {\r\n            var injectables, objs\r\n            for (var i in dependencies) {\r\n                // ----------------------------------------\r\n                // if i is an object/function, add it directly.\r\n                // ----------------------------------------\r\n                if (typeof dependencies[i] !== 'string') {\r\n                    container.push(dependencies[i]);\r\n                    continue;\r\n                }\r\n\r\n                // ----------------------------------------\r\n                // Get the injectable from the module we are importing from\r\n                // ----------------------------------------\r\n                var mod = dependencies.split('.')[0],\r\n                    provider = dependencies[i].split('.')[1],\r\n                    injectables, objs, module;\r\n\r\n                // ----------------------------------------\r\n                // get the module\r\n                // ----------------------------------------\r\n                module = carbon._modules[module];\r\n\r\n                // ----------------------------------------\r\n                // use the module to try and load the provider\r\n                // ----------------------------------------\r\n                container.push(module._find(provider, false, true));\r\n            }\r\n        },\r\n        module: function(name) {\r\n            var mt, instance;\r\n\r\n            if (this._modules[name]) {\r\n                return this._modules[name];\r\n            }\r\n\r\n            // create new instance\r\n            mt = new ModuleTemplate();\r\n            instance = Object.create(mt);\r\n\r\n            instance._name = name;\r\n\r\n            return instance = this._modules[name] = instance;\r\n        },\r\n        wrap: function(fn) {\r\n            var deps = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : null, container = [undefined];\r\n\r\n            if (deps) {\r\n                // ----------------------------------------\r\n                // map to the modules, and retrieve them from it's providers\r\n                // ----------------------------------------\r\n                this.map_dependencies(container, deps);\r\n\r\n                // ----------------------------------------\r\n                // wrap a function to enable di of module dependencies.\r\n                // ----------------------------------------\r\n                fn = fn.bind.apply(fn, container);\r\n            }\r\n            return fn;            \r\n        }\r\n    };\r\n    exports.carbon = carbon;\r\n})(this);\r\n"],"sourceRoot":"/source/"}