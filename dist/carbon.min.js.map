{"version":3,"sources":["carbon.js"],"names":[],"mappings":"CAAA,SAAA,GACA,YAEA,IAAA,GAAA,MAAA,UAAA,MAEA,EAAA,SAAA,GACA,MAAA,QAAA,UAAA,GAGA,GAAA,QACA,aACA,OAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,UAAA,OAAA,EAAA,EAAA,KAAA,UAAA,GAAA,IAIA,IADA,EAAA,KAAA,UAAA,IACA,EAAA,CACA,IAAA,EACA,KAAA,IAAA,OAAA,yBAEA,OAAA,kBAAA,GAAA,GAAA,GAAA,EAEA,EAAA,EAAA,EAAA,KAAA,MAAA,GAAA,QAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EACA,KAAA,UAAA,GAAA,GAAA,MAIA","file":"carbon.min.js","sourcesContent":["(function(exports) {\n    \"use strict\";\n\n    var slice = Array.prototype.slice;\n\n    var mapDependencies = function(key) {\n        return carbon.instances[key];\n    };\n\n    exports.carbon = {\n        instances: {},\n        module: function(name, Constructor) {\n            var deps = arguments.length > 2 ? slice.call(arguments, 2) : null, Module;\n\n            // see if we are trying to load the module and if it exists\n            Module = this.instances[name];\n            if (!Constructor) {\n                if (!Module) {\n                    throw new Error('Module does not exist.');\n                }\n                return (typeof Module === 'function') ? new Module() : Module;\n            } else {\n                Constructor = deps ? Constructor.bind.apply(Constructor, [undefined].concat(deps.map(mapDependencies, this))) : Constructor;\n                this.instances[name] = new Constructor();\n            }\n        }\n    };\n})(this);\n"],"sourceRoot":"/source/"}