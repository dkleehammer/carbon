{"version":3,"sources":["carbon.js"],"names":[],"mappings":"CAAA,SAAA,GACA,YAIA,SAAA,GAAA,EAAA,GACA,IAAA,GAAA,KAAA,GACA,EAAA,eAAA,KACA,EAAA,GAAA,EAAA,GAGA,OAAA,GARA,GAAA,GAAA,MAAA,UAAA,MAcA,GACA,cACA,aAAA,SAAA,EAAA,GACA,IAAA,GAAA,KAAA,MAAA,WACA,GAAA,IAAA,EAAA,QAAA,GACA,MAAA,IACA,KAAA,WAAA,GAAA,GAEA,KAAA,WAAA,IAIA,aAAA,SAAA,EAAA,GACA,KAAA,WAAA,GAAA,GAEA,iBAAA,SAAA,GACA,MAAA,MAAA,aAAA,IAEA,QAAA,SAAA,EAAA,GACA,GAEA,GAFA,EAAA,EAAA,UACA,EAAA,UAAA,OAAA,EAAA,EAAA,KAAA,UAAA,EAAA,UAAA,QAAA,IAMA,IAAA,KAAA,aAAA,GAEA,MADA,GAAA,KAAA,aAAA,GACA,GAAA,EAMA,IAAA,EAAA,CAIA,GAAA,MAAA,IACA,KAAA,GAAA,KAAA,GACA,gBAAA,GAAA,GACA,EAAA,KAAA,EAAA,IAEA,EAAA,KAAA,EAAA,GAGA,GAAA,EAAA,OAAA,EAAA,IAAA,KAAA,iBAAA,OACA,EAAA,EAAA,KAAA,MAAA,EAAA,GAYA,MANA,MAAA,aAAA,EAAA,GAKA,EAAA,KAAA,aAAA,GACA,GAAA,IAEA,QAAA,SAAA,EAAA,GACA,GAEA,GAFA,EAAA,EAAA,UACA,EAAA,UAAA,OAAA,EAAA,EAAA,KAAA,UAAA,EAAA,UAAA,QAAA,KACA,KAAA,IAKA,IAAA,KAAA,aAAA,GACA,MAAA,MAAA,aAAA,EAcA,IARA,gBAAA,KACA,EAAA,EACA,EAAA,UAAA,IAMA,EAAA,CAEA,IAAA,GAAA,KAAA,GACA,gBAAA,GAAA,GACA,EAAA,KAAA,EAAA,IAEA,EAAA,KAAA,EAAA,GAOA,GAAA,EAAA,OAAA,EAAA,IAAA,KAAA,iBAAA,OACA,EAAA,EAAA,KAAA,MAAA,EAAA,GAuBA,MAjBA,GAAA,GAAA,GAKA,IACA,EAAA,EAAA,EAAA,IAMA,KAAA,aAAA,EAAA,GAKA,KAAA,aAAA,KAIA,GACA,YACA,WAAA,SAAA,GACA,MAAA,MAAA,SAAA,IAAA,QAEA,WAAA,SAAA,EAAA,GACA,KAAA,SAAA,GAAA,GAEA,kBAAA,SAAA,GACA,GAAA,SAAA,EAAA,SAAA,KAAA,EAAA,QAAA,KAAA,CAIA,GAAA,GAAA,EAAA,MAAA,KAAA,GAAA,EAAA,EAAA,MAAA,KAAA,EAEA,IAAA,EAAA,SAAA,GAIA,MAAA,GAAA,WAAA,GAAA,aAAA,IAAA,OAEA,cAAA,WACA,MAAA,QAAA,OAAA,IAEA,OAAA,SAAA,GACA,GACA,GADA,EAAA,UAAA,OAAA,EAAA,EAAA,KAAA,UAAA,GAAA,IAIA,IAAA,KAAA,WAAA,GACA,MAAA,MAAA,WAAA,EAMA,IAFA,EAAA,KAAA,gBAEA,EACA,IAAA,GAAA,KAAA,GAAA,CACA,GAAA,GAAA,EAAA,kBAAA,EAAA,GAEA,IAIA,EAAA,aAAA,EAAA,GAAA,EAAA,IAMA,MAFA,MAAA,WAAA,EAAA,GAEA,GAEA,KAAA,SAAA,GACA,GAAA,GAAA,UAAA,OAAA,EAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,KACA,GAAA,OAGA,KAAA,EACA,MAAA,EAIA,IAAA,EACA,IAAA,GAAA,KAAA,GAAA,CACA,GAAA,GAAA,EAAA,kBAAA,EAAA,GACA,IACA,EAAA,KAAA,GAMA,MAAA,GAAA,KAAA,MAAA,EAAA,IAIA,GAAA,OAAA,GACA","file":"carbon.min.js","sourcesContent":["(function(exports) {\n    \"use strict\";\n\n    var slice = Array.prototype.slice;\n\n    function extend(destination, source) {\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                destination[k] = source[k];\n            }\n        }\n        return destination; \n    }\n\n    /**\n     * module object\n     **/\n    var module = {\n        _providers: {},\n        _getProvider: function(name, storageName) {\n            for (var i in this._providers) {\n                if (i.indexOf(name) === 0) {\n                    if (storageName) {\n                        return [this._providers[i], i];\n                    }\n                    return this._providers[i];\n                }\n            }\n        },\n        _setProvider: function(providerName, fn) {\n            this._providers[providerName] = fn;\n        },\n        _mapDependencies: function mapDependencies(key) {\n            return this._getProvider(key);\n        },\n        factory: function(name, Factory) {\n            var providerName = name + 'Factory',\n                deps = arguments.length > 2 ? slice.call(arguments, 1, arguments.length) : null,\n                Service;\n\n            // ----------------------------------------\n            // if the factory exists, return it and exit\n            // ----------------------------------------\n            if (this._getProvider(name)) {\n                Service = this._getProvider(name);\n                return new Service();\n            }\n\n            // ----------------------------------------\n            // add our dependencies if they exist\n            // ----------------------------------------\n            if (deps) {\n                // ----------------------------------------\n                // separate the paramters from the injectables\n                // ----------------------------------------\n                var injectables = [], objs = [];\n                for (var i in deps) {\n                    if (typeof deps[i] === 'string') {\n                        injectables.push(deps[i]);\n                    } else {\n                        objs.push(deps[i]);\n                    }\n                }\n                injectables = objs.concat(injectables.map(this._mapDependencies, this));\n                Factory = Factory.bind.apply(Factory, injectables);\n            }\n \n            // ----------------------------------------\n            // store the factory\n            // ----------------------------------------\n            this._setProvider(providerName, Factory);\n\n            // ----------------------------------------\n            // return the new instance\n            // ----------------------------------------\n            Service = this._getProvider(name);\n            return new Service();\n        },\n        service: function(name, Service) {\n            var providerName = name + 'Service',\n                deps = arguments.length > 2 ? slice.call(arguments, 1, arguments.length) : null,\n                injectables = [], objs = [], extendObj;\n\n            // ----------------------------------------\n            // if the service exists, return it and exit\n            // ----------------------------------------\n            if (this._getProvider(name)) {\n                return this._getProvider(name);\n            }\n\n            // ----------------------------------------\n            // creating/replace an existing service\n            // ----------------------------------------\n            if (typeof Service === 'object') {\n                extendObj = Service;\n                Service = arguments[2];\n            }\n\n            // ----------------------------------------\n            // add our dependencies if they exist\n            // ----------------------------------------\n            if (deps) {\n                // separate the paramters from the injectables\n                for (var i in deps) {\n                    if (typeof deps[i] === 'string') {\n                        injectables.push(deps[i]);\n                    } else {\n                        objs.push(deps[i]);\n                    }\n                }\n\n                // console.log('injectables: ', injectables);\n                // console.log('objs: ', objs);\n\n                injectables = objs.concat(injectables.map(this._mapDependencies, this));\n                Service = Service.bind.apply(Service, injectables);\n            }\n\n            // ----------------------------------------\n            // instantiate the service\n            // ----------------------------------------\n            Service = new Service();\n\n            // ----------------------------------------\n            // if extendObj exists, then extendObj the two objects\n            // ----------------------------------------\n            if (extendObj) {\n                Service = extend(Service, extendObj);\n            }\n            \n            // ----------------------------------------\n            // store the singleton\n            // ----------------------------------------\n            this._setProvider(providerName, Service);\n\n            // ----------------------------------------\n            // return the singleton instance\n            // ----------------------------------------\n            return this._getProvider(name);\n        }\n    };\n\n    var carbon = {\n        _modules: {},\n        _getModule: function(name) {\n            return this._modules[name] || undefined;\n        },\n        _setModule: function(name, module) {\n            this._modules[name] = module;\n        },\n        _importFromModule: function(dep) {\n            if (undefined === dep.indexOf || dep.indexOf('.') === -1) {\n                return;\n            }\n\n            var mod = dep.split('.')[0], provider = dep.split('.')[1];\n\n            if (!carbon._modules[mod]) {\n                return;\n            }\n\n            return carbon._getModule(mod)._getProvider(provider) || null;\n        },\n        _createModule: function() {\n            return (Object.create(module));\n        },\n        module: function(name) {\n            var deps = arguments.length > 1 ? slice.call(arguments, 1) : null,\n                instance; \n\n            // if the module already exists, return it\n            if (this._getModule(name)) {\n                return this._getModule(name);\n            }\n\n            // build our module instance\n            instance = this._createModule();\n\n            if (deps) {\n                for (var i in deps) {\n                    var d = carbon._importFromModule(deps[i]);\n\n                    if (!d) {\n                        continue;\n                    }\n\n                    instance._setProvider(d[1], d[0]);\n                }\n            }\n\n            this._setModule(name, instance);\n\n            return instance;\n        },\n        wrap: function(fn) {\n            var deps = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : null,\n                container = [undefined]; // first item has to be undefined for some reason\n\n            // if no depenendencies, we don't need to be here.\n            if (!deps) {\n                return fn;\n            }\n\n            // loop through dependencies, map to their modules, and retrieve them from it's providers\n            if (deps) {\n                for (var i in deps) {\n                    var d = carbon._importFromModule(deps[i]);\n                    if (d) {\n                        container.push(d);\n                    }\n                }\n            }\n\n            // wrap a function to enable di of module dependencies.\n            return fn.bind.apply(fn, container);\n        }\n    };\n\n    exports.carbon = carbon;\n})(this);\n"],"sourceRoot":"/source/"}