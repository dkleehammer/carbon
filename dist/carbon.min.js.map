{"version":3,"sources":["carbon.js"],"names":[],"mappings":"CACA,SAAA,GACA,YAKA,IAAA,GAAA,SAAA,GACA,MAAA,gBAAA,GAAA,EAAA,UAAA,GAAA,GAMA,GACA,aACA,OAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,UAAA,OAAA,EAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,IAUA,IALA,EAAA,KAAA,UAAA,IAKA,EAAA,CAKA,IAAA,EACA,KAAA,IAAA,OAAA,UAAA,EAAA,mBAMA,OAAA,kBAAA,GAAA,GAAA,GAAA,EAKA,GAAA,EACA,KAAA,IAAA,OAAA,UAAA,EAAA,kBAMA,GAAA,EAAA,EAAA,KAAA,MAAA,GAAA,QAAA,OAAA,EAAA,IAAA,KAAA,EAKA,KAAA,UAAA,GAAA,GAAA,IAGA,KAAA,SAAA,GACA,GAAA,GAAA,UAAA,OAAA,EAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,IACA,OAAA,GAAA,EAAA,EAAA,KAAA,MAAA,GAAA,QAAA,OAAA,EAAA,IAAA,KAAA,GAGA,GAAA,OAAA,GACA","file":"carbon.min.js","sourcesContent":["\n(function(exports) {\n    \"use strict\";\n\n    // ----------------------------------------\n    // Map dependencies if a string by checking the modules, otherwise, return the key\n    // ----------------------------------------\n    var mapDependencies = function(key) {\n        return (typeof key === 'string') ? carbon.instances[key] : key;\n    };\n\n    // ----------------------------------------\n    // Using exports we can work with both NodeJS and the browser, actually any global object that has context\n    // ----------------------------------------\n    var carbon = {\n        instances: {},\n        module: function(name, Constructor) {\n            var deps = arguments.length > 2 ? Array.prototype.slice.call(arguments, 2) : null, Module;\n\n            // ----------------------------------------\n            // see if the module already exists\n            // ----------------------------------------\n            Module = this.instances[name];\n\n            // ----------------------------------------\n            // Make sure we are not trying to build a new instance\n            // ----------------------------------------\n            if (!Constructor) {\n\n                // ----------------------------------------\n                // If no module found, throw error.\n                // ----------------------------------------\n                if (!Module) {\n                    throw new Error('Module ' + name + ' does not exist.');\n                }\n\n                // ----------------------------------------\n                // determine if we have an singleton or factory module\n                // ----------------------------------------\n                return (typeof Module === 'function') ? new Module() : Module;\n            } else {\n                // ----------------------------------------\n                // if the module exists, throw error.  We do not want to set or return original since it's not what the dev is expecting\n                // ----------------------------------------\n                if (Module) {\n                    throw new Error('Module ' + name + ' already exists');\n                }\n\n                // ----------------------------------------\n                // if there are dependencies, map them, otherwise, return the Constructor function\n                // ----------------------------------------\n                Constructor = deps ? Constructor.bind.apply(Constructor, [undefined].concat(deps.map(mapDependencies))) : Constructor;\n\n                // ----------------------------------------\n                // store the instance of the module\n                // ----------------------------------------\n                this.instances[name] = new Constructor();\n            }\n        },\n        wrap: function(fn) {\n            var deps = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : null;\n            return fn = deps ? fn.bind.apply(fn, [undefined].concat(deps.map(mapDependencies))) : fn;\n        }\n    };\n    exports.carbon = carbon;\n})(this);\n"],"sourceRoot":"/source/"}